/**
 * Your application code goes here<br>
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose 
 * of building native mobile applications using Java.
 */


package userclasses;

import com.basajans.rest.resource.ConstanConnection;
import com.codename1.io.ConnectionRequest;
import com.codename1.io.JSONParser;
import com.codename1.processing.Result;
import generated.StateMachineBase;
import com.codename1.ui.*; 
import com.codename1.ui.events.*;
import com.codename1.ui.util.Resources;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;

/**
 *
 * @author Your name here
 */
public class StateMachine extends StateMachineBase {
//    private  List<String> USER_ROLE;
//    private  Form formMain;
//    private Form formHome;
//    private Form formChildDocument;
//    private Form formChildSubordinates;
    public StateMachine(String resFile) {
        super(resFile);
        findLblMessageLogin().setVisible(false);
        // do not modify, write code in initVars and initialize class members there,
        // the constructor might be invoked too late due to race conditions that might occur
        
        
    }
    
    /**
     * this method should be used to initialize variables instead of
     * the constructor/class scope to avoid race conditions
     * @param res
     */
    @Override
    protected void initVars(Resources res) {
    
    }


    private final ValidasiSession validasiSession=new ValidasiSession();
    private final Map<String,Object> session=new HashMap<>();
    
    @Override
    protected void onMain_BtnLoginAction(Component c, ActionEvent event) {
        String username=findTxtUsername().getText();
        String password=findTxtPassword().getText();
        if(validasiSession.cekfield(username, password)){
            Map<String,String> mapService= new HashMap<>();
            mapService.put("username", username);
            mapService.put("password", password);
            final String payload = Result.fromContent(mapService).toString();
            ConnectionRequest connectionRequest=new ConnectionRequest("http://cloud.abyor.com:13088/hcm/api/login"){
                 @Override
                    protected void buildRequestBody(OutputStream os) throws IOException {
                            os.write(payload.getBytes("UTF-8"));
                    }

                @Override
                protected void readResponse(InputStream input) throws IOException {
                    JSONParser jsonParse= new JSONParser();
                    Map<String, Object> mapRespone=jsonParse.parseJSON(new InputStreamReader(input));
                    Map<String,Object> mapData=(Map<String,Object>) mapRespone.get("data");
                        if(mapData!=null){
                            session.clear();
                            session.put("username", mapData.get("username"));
                            session.put("auth_token", mapData.get("auth_token")); 
                            showForm("mainHome", event.getCommand());
                        }
                
                    }   
            };
            ConstanConnection.postJSON(connectionRequest);
        }else{
            findLblMessageLogin().setText("* please input username and password");
            findLblMessageLogin().setVisible(true);
        }
    }

    
}
